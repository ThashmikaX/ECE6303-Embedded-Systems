
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000262  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000020e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000262  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000294  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ddf  00000000  00000000  00000314  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000c80  00000000  00000000  000010f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003d7  00000000  00000000  00001d73  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  0000214c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000065a  00000000  00000000  000021c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000161  00000000  00000000  0000281e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000297f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
   6:	00 00       	nop
   8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
   a:	00 00       	nop
   c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
   e:	00 00       	nop
  10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
  12:	00 00       	nop
  14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
  16:	00 00       	nop
  18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
  1e:	00 00       	nop
  20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
  22:	00 00       	nop
  24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
  26:	00 00       	nop
  28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
  2e:	00 00       	nop
  30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
  32:	00 00       	nop
  34:	61 c0       	rjmp	.+194    	; 0xf8 <__bad_interrupt>
  36:	00 00       	nop
  38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
  3e:	00 00       	nop
  40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
  42:	00 00       	nop
  44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
  46:	00 00       	nop
  48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
  4e:	00 00       	nop
  50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
  52:	00 00       	nop
  54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
  56:	00 00       	nop
  58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
  5e:	00 00       	nop
  60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
  62:	00 00       	nop
  64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
  66:	00 00       	nop
  68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
  6e:	00 00       	nop
  70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
  72:	00 00       	nop
  74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
  76:	00 00       	nop
  78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
  7e:	00 00       	nop
  80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
  82:	00 00       	nop
  84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
  86:	00 00       	nop
  88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	35 c0       	rjmp	.+106    	; 0xf8 <__bad_interrupt>
  8e:	00 00       	nop
  90:	33 c0       	rjmp	.+102    	; 0xf8 <__bad_interrupt>
  92:	00 00       	nop
  94:	31 c0       	rjmp	.+98     	; 0xf8 <__bad_interrupt>
  96:	00 00       	nop
  98:	2f c0       	rjmp	.+94     	; 0xf8 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	2d c0       	rjmp	.+90     	; 0xf8 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	2b c0       	rjmp	.+86     	; 0xf8 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	29 c0       	rjmp	.+82     	; 0xf8 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	27 c0       	rjmp	.+78     	; 0xf8 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	25 c0       	rjmp	.+74     	; 0xf8 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	23 c0       	rjmp	.+70     	; 0xf8 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	21 c0       	rjmp	.+66     	; 0xf8 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	1f c0       	rjmp	.+62     	; 0xf8 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	1d c0       	rjmp	.+58     	; 0xf8 <__bad_interrupt>
  be:	00 00       	nop
  c0:	1b c0       	rjmp	.+54     	; 0xf8 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	19 c0       	rjmp	.+50     	; 0xf8 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	17 c0       	rjmp	.+46     	; 0xf8 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c0       	rjmp	.+42     	; 0xf8 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	13 c0       	rjmp	.+38     	; 0xf8 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	11 c0       	rjmp	.+34     	; 0xf8 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	0f c0       	rjmp	.+30     	; 0xf8 <__bad_interrupt>
  da:	00 00       	nop
  dc:	0d c0       	rjmp	.+26     	; 0xf8 <__bad_interrupt>
  de:	00 00       	nop
  e0:	0b c0       	rjmp	.+22     	; 0xf8 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60
  f4:	54 d0       	rcall	.+168    	; 0x19e <main>
  f6:	89 c0       	rjmp	.+274    	; 0x20a <_exit>

000000f8 <__bad_interrupt>:
  f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <_Z12initHardwarev>:
	return 0;
}

void initHardware() {
	// Set PORTA and PORTC as output for 7-segment displays
	DDRA = 0xFF; // PORTA as output
  fa:	8f ef       	ldi	r24, 0xFF	; 255
  fc:	81 b9       	out	0x01, r24	; 1
	DDRC = 0xFF; // PORTC as output
  fe:	87 b9       	out	0x07, r24	; 7

	// Initialize PORTA and PORTC to 0
	PORTA = 0x00;
 100:	12 b8       	out	0x02, r1	; 2
	PORTC = 0x00;
 102:	18 b8       	out	0x08, r1	; 8
 104:	08 95       	ret

00000106 <_Z7initADCv>:
}

void initADC() {
	// Set the ADC reference voltage to AVCC (5V)
	ADMUX = (1 << REFS0);
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>

	// Enable ADC and set pre-scaler to 128 (16MHz/128 = 125kHz)
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);
 10c:	87 e8       	ldi	r24, 0x87	; 135
 10e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 112:	08 95       	ret

00000114 <_Z7readADCh>:
}

int readADC(uint8_t channel) {
	// Select ADC channel (0-7) and clear lower bits
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
 114:	ec e7       	ldi	r30, 0x7C	; 124
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	90 81       	ld	r25, Z
 11a:	90 7f       	andi	r25, 0xF0	; 240
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	89 2b       	or	r24, r25
 120:	80 83       	st	Z, r24

	// Start ADC conversion
	ADCSRA |= (1 << ADSC);
 122:	ea e7       	ldi	r30, 0x7A	; 122
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	80 64       	ori	r24, 0x40	; 64
 12a:	80 83       	st	Z, r24

	// Wait for conversion to complete
	while (ADCSRA & (1 << ADSC));
 12c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7c007a>
 130:	86 fd       	sbrc	r24, 6
 132:	fc cf       	rjmp	.-8      	; 0x12c <_Z7readADCh+0x18>

	// Return the ADC result
	return ADC;
 134:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
 138:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
}
 13c:	08 95       	ret

0000013e <_Z7displayi>:

void display(int adcValue) {
 13e:	0f 93       	push	r16
 140:	1f 93       	push	r17
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
	// Split the ADC value into digits
	int thousands = adcValue / 1000;
 148:	68 ee       	ldi	r22, 0xE8	; 232
 14a:	73 e0       	ldi	r23, 0x03	; 3
 14c:	37 d0       	rcall	.+110    	; 0x1bc <__divmodhi4>
 14e:	fb 01       	movw	r30, r22
	int hundreds = (adcValue % 1000) / 100;
 150:	24 e6       	ldi	r18, 0x64	; 100
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	b9 01       	movw	r22, r18
 156:	32 d0       	rcall	.+100    	; 0x1bc <__divmodhi4>
 158:	46 2f       	mov	r20, r22
	int tens = (adcValue % 100) / 10;
 15a:	ce 01       	movw	r24, r28
 15c:	b9 01       	movw	r22, r18
 15e:	2e d0       	rcall	.+92     	; 0x1bc <__divmodhi4>
 160:	0a e0       	ldi	r16, 0x0A	; 10
 162:	10 e0       	ldi	r17, 0x00	; 0
 164:	b8 01       	movw	r22, r16
 166:	2a d0       	rcall	.+84     	; 0x1bc <__divmodhi4>
 168:	9b 01       	movw	r18, r22
	int ones = adcValue % 10;
 16a:	ce 01       	movw	r24, r28
 16c:	b8 01       	movw	r22, r16
 16e:	26 d0       	rcall	.+76     	; 0x1bc <__divmodhi4>
 170:	e2 95       	swap	r30

	// Display each digit on the 7-segment displays
	PORTC = (thousands << 4) | (hundreds & 0x0F); // PC7-PC4: thousands, PC3-PC0: hundreds
 172:	f2 95       	swap	r31
 174:	f0 7f       	andi	r31, 0xF0	; 240
 176:	fe 27       	eor	r31, r30
 178:	e0 7f       	andi	r30, 0xF0	; 240
 17a:	fe 27       	eor	r31, r30
 17c:	4f 70       	andi	r20, 0x0F	; 15
 17e:	e4 2b       	or	r30, r20
 180:	e8 b9       	out	0x08, r30	; 8
 182:	22 95       	swap	r18
	PORTA = (tens << 4) | (ones & 0x0F);          // PA7-PA4: tens, PA3-PA0: ones
 184:	32 95       	swap	r19
 186:	30 7f       	andi	r19, 0xF0	; 240
 188:	32 27       	eor	r19, r18
 18a:	20 7f       	andi	r18, 0xF0	; 240
 18c:	32 27       	eor	r19, r18
 18e:	8f 70       	andi	r24, 0x0F	; 15
 190:	28 2b       	or	r18, r24
 192:	22 b9       	out	0x02, r18	; 2
 194:	df 91       	pop	r29
 196:	cf 91       	pop	r28
 198:	1f 91       	pop	r17
 19a:	0f 91       	pop	r16
 19c:	08 95       	ret

0000019e <main>:
 19e:	ad df       	rcall	.-166    	; 0xfa <_Z12initHardwarev>
int main(void) {
	int adcValue;

	// Initialize hardware and ADC
	initHardware();
	initADC();
 1a0:	b2 df       	rcall	.-156    	; 0x106 <_Z7initADCv>

	while (1) {
		// Read ADC value from channel 0
		adcValue = readADC(0);
 1a2:	80 e0       	ldi	r24, 0x00	; 0
 1a4:	b7 df       	rcall	.-146    	; 0x114 <_Z7readADCh>

		// Display the ADC value on the 7-segment displays
		display(adcValue);
 1a6:	cb df       	rcall	.-106    	; 0x13e <_Z7displayi>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1aa:	83 ed       	ldi	r24, 0xD3	; 211
 1ac:	90 e3       	ldi	r25, 0x30	; 48
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x10>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x1a>
 1b8:	00 00       	nop
 1ba:	f3 cf       	rjmp	.-26     	; 0x1a2 <main+0x4>

000001bc <__divmodhi4>:
 1bc:	97 fb       	bst	r25, 7
 1be:	07 2e       	mov	r0, r23
 1c0:	16 f4       	brtc	.+4      	; 0x1c6 <__divmodhi4+0xa>
 1c2:	00 94       	com	r0
 1c4:	06 d0       	rcall	.+12     	; 0x1d2 <__divmodhi4_neg1>
 1c6:	77 fd       	sbrc	r23, 7
 1c8:	08 d0       	rcall	.+16     	; 0x1da <__divmodhi4_neg2>
 1ca:	0b d0       	rcall	.+22     	; 0x1e2 <__udivmodhi4>
 1cc:	07 fc       	sbrc	r0, 7
 1ce:	05 d0       	rcall	.+10     	; 0x1da <__divmodhi4_neg2>
 1d0:	3e f4       	brtc	.+14     	; 0x1e0 <__divmodhi4_exit>

000001d2 <__divmodhi4_neg1>:
 1d2:	90 95       	com	r25
 1d4:	81 95       	neg	r24
 1d6:	9f 4f       	sbci	r25, 0xFF	; 255
 1d8:	08 95       	ret

000001da <__divmodhi4_neg2>:
 1da:	70 95       	com	r23
 1dc:	61 95       	neg	r22
 1de:	7f 4f       	sbci	r23, 0xFF	; 255

000001e0 <__divmodhi4_exit>:
 1e0:	08 95       	ret

000001e2 <__udivmodhi4>:
 1e2:	aa 1b       	sub	r26, r26
 1e4:	bb 1b       	sub	r27, r27
 1e6:	51 e1       	ldi	r21, 0x11	; 17
 1e8:	07 c0       	rjmp	.+14     	; 0x1f8 <__udivmodhi4_ep>

000001ea <__udivmodhi4_loop>:
 1ea:	aa 1f       	adc	r26, r26
 1ec:	bb 1f       	adc	r27, r27
 1ee:	a6 17       	cp	r26, r22
 1f0:	b7 07       	cpc	r27, r23
 1f2:	10 f0       	brcs	.+4      	; 0x1f8 <__udivmodhi4_ep>
 1f4:	a6 1b       	sub	r26, r22
 1f6:	b7 0b       	sbc	r27, r23

000001f8 <__udivmodhi4_ep>:
 1f8:	88 1f       	adc	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	5a 95       	dec	r21
 1fe:	a9 f7       	brne	.-22     	; 0x1ea <__udivmodhi4_loop>
 200:	80 95       	com	r24
 202:	90 95       	com	r25
 204:	bc 01       	movw	r22, r24
 206:	cd 01       	movw	r24, r26
 208:	08 95       	ret

0000020a <_exit>:
 20a:	f8 94       	cli

0000020c <__stop_program>:
 20c:	ff cf       	rjmp	.-2      	; 0x20c <__stop_program>
