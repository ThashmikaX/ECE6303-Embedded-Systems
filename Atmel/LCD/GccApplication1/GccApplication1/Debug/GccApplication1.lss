
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  00000208  0000027c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000208  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000282  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000b3b  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000072a  00000000  00000000  00000e77  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003c2  00000000  00000000  000015a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000080  00000000  00000000  00001964  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000473  00000000  00000000  000019e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003dd  00000000  00000000  00001e57  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00002234  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e0       	ldi	r30, 0x08	; 8
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 30       	cpi	r26, 0x06	; 6
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 ed 00 	call	0x1da	; 0x1da <main>
  8e:	0c 94 02 01 	jmp	0x204	; 0x204 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z11LCD_Commandh>:
	}
}

// Send command to LCD
void LCD_Command(unsigned char cmd) {
	PORTD = (PORTD & 0x0F) | (cmd & 0xF0);  // Send upper nibble
  96:	9b b1       	in	r25, 0x0b	; 11
  98:	9f 70       	andi	r25, 0x0F	; 15
  9a:	28 2f       	mov	r18, r24
  9c:	20 7f       	andi	r18, 0xF0	; 240
  9e:	92 2b       	or	r25, r18
  a0:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RS);  // RS = 0 for command
  a2:	9b b1       	in	r25, 0x0b	; 11
  a4:	9f 7b       	andi	r25, 0xBF	; 191
  a6:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);  // RW = 0 for write
  a8:	9b b1       	in	r25, 0x0b	; 11
  aa:	9f 7d       	andi	r25, 0xDF	; 223
  ac:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << EN);   // Enable pulse
  ae:	9b b1       	in	r25, 0x0b	; 11
  b0:	90 61       	ori	r25, 0x10	; 16
  b2:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b4:	35 e0       	ldi	r19, 0x05	; 5
  b6:	3a 95       	dec	r19
  b8:	f1 f7       	brne	.-4      	; 0xb6 <_Z11LCD_Commandh+0x20>
  ba:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << EN);
  bc:	9b b1       	in	r25, 0x0b	; 11
  be:	9f 7e       	andi	r25, 0xEF	; 239
  c0:	9b b9       	out	0x0b, r25	; 11
  c2:	ef e1       	ldi	r30, 0x1F	; 31
  c4:	f3 e0       	ldi	r31, 0x03	; 3
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <_Z11LCD_Commandh+0x30>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_Z11LCD_Commandh+0x36>
  cc:	00 00       	nop

	_delay_us(200);

	PORTD = (PORTD & 0x0F) | (cmd << 4);  // Send lower nibble
  ce:	2b b1       	in	r18, 0x0b	; 11
  d0:	f0 e1       	ldi	r31, 0x10	; 16
  d2:	8f 9f       	mul	r24, r31
  d4:	c0 01       	movw	r24, r0
  d6:	11 24       	eor	r1, r1
  d8:	92 2f       	mov	r25, r18
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	89 2b       	or	r24, r25
  de:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << EN);
  e0:	8b b1       	in	r24, 0x0b	; 11
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	8b b9       	out	0x0b, r24	; 11
  e6:	35 e0       	ldi	r19, 0x05	; 5
  e8:	3a 95       	dec	r19
  ea:	f1 f7       	brne	.-4      	; 0xe8 <_Z11LCD_Commandh+0x52>
  ec:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << EN);
  ee:	8b b1       	in	r24, 0x0b	; 11
  f0:	8f 7e       	andi	r24, 0xEF	; 239
  f2:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f4:	8f e3       	ldi	r24, 0x3F	; 63
  f6:	9f e1       	ldi	r25, 0x1F	; 31
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <_Z11LCD_Commandh+0x62>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_Z11LCD_Commandh+0x68>
  fe:	00 00       	nop
 100:	08 95       	ret

00000102 <_Z8LCD_Charh>:
	_delay_ms(2);  // Command execution time
}

// Send a character to the LCD
void LCD_Char(unsigned char data) {
	PORTD = (PORTD & 0x0F) | (data & 0xF0);  // Send upper nibble
 102:	9b b1       	in	r25, 0x0b	; 11
 104:	9f 70       	andi	r25, 0x0F	; 15
 106:	28 2f       	mov	r18, r24
 108:	20 7f       	andi	r18, 0xF0	; 240
 10a:	92 2b       	or	r25, r18
 10c:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << RS);  // RS = 1 for data
 10e:	9b b1       	in	r25, 0x0b	; 11
 110:	90 64       	ori	r25, 0x40	; 64
 112:	9b b9       	out	0x0b, r25	; 11
	PORTD &= ~(1 << RW);  // RW = 0 for write
 114:	9b b1       	in	r25, 0x0b	; 11
 116:	9f 7d       	andi	r25, 0xDF	; 223
 118:	9b b9       	out	0x0b, r25	; 11
	PORTD |= (1 << EN);
 11a:	9b b1       	in	r25, 0x0b	; 11
 11c:	90 61       	ori	r25, 0x10	; 16
 11e:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	35 e0       	ldi	r19, 0x05	; 5
 122:	3a 95       	dec	r19
 124:	f1 f7       	brne	.-4      	; 0x122 <_Z8LCD_Charh+0x20>
 126:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << EN);
 128:	9b b1       	in	r25, 0x0b	; 11
 12a:	9f 7e       	andi	r25, 0xEF	; 239
 12c:	9b b9       	out	0x0b, r25	; 11
 12e:	ef e1       	ldi	r30, 0x1F	; 31
 130:	f3 e0       	ldi	r31, 0x03	; 3
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <_Z8LCD_Charh+0x30>
 136:	00 c0       	rjmp	.+0      	; 0x138 <_Z8LCD_Charh+0x36>
 138:	00 00       	nop

	_delay_us(200);

	PORTD = (PORTD & 0x0F) | (data << 4);  // Send lower nibble
 13a:	2b b1       	in	r18, 0x0b	; 11
 13c:	f0 e1       	ldi	r31, 0x10	; 16
 13e:	8f 9f       	mul	r24, r31
 140:	c0 01       	movw	r24, r0
 142:	11 24       	eor	r1, r1
 144:	92 2f       	mov	r25, r18
 146:	9f 70       	andi	r25, 0x0F	; 15
 148:	89 2b       	or	r24, r25
 14a:	8b b9       	out	0x0b, r24	; 11
	PORTD |= (1 << EN);
 14c:	8b b1       	in	r24, 0x0b	; 11
 14e:	80 61       	ori	r24, 0x10	; 16
 150:	8b b9       	out	0x0b, r24	; 11
 152:	35 e0       	ldi	r19, 0x05	; 5
 154:	3a 95       	dec	r19
 156:	f1 f7       	brne	.-4      	; 0x154 <_Z8LCD_Charh+0x52>
 158:	00 00       	nop
	_delay_us(1);
	PORTD &= ~(1 << EN);
 15a:	8b b1       	in	r24, 0x0b	; 11
 15c:	8f 7e       	andi	r24, 0xEF	; 239
 15e:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 160:	8f e3       	ldi	r24, 0x3F	; 63
 162:	9f e1       	ldi	r25, 0x1F	; 31
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	f1 f7       	brne	.-4      	; 0x164 <_Z8LCD_Charh+0x62>
 168:	00 c0       	rjmp	.+0      	; 0x16a <_Z8LCD_Charh+0x68>
 16a:	00 00       	nop
 16c:	08 95       	ret

0000016e <_Z8LCD_Initv>:
 16e:	2f ef       	ldi	r18, 0xFF	; 255
 170:	89 ef       	ldi	r24, 0xF9	; 249
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	21 50       	subi	r18, 0x01	; 1
 176:	80 40       	sbci	r24, 0x00	; 0
 178:	90 40       	sbci	r25, 0x00	; 0
 17a:	e1 f7       	brne	.-8      	; 0x174 <_Z8LCD_Initv+0x6>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <_Z8LCD_Initv+0x10>
 17e:	00 00       	nop

// Initialize LCD
void LCD_Init() {
	_delay_ms(20);  // Wait for LCD to power up

	LCD_Command(0x02);  // Initialize LCD in 4-bit mode
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x28);  // 2 lines, 5x8 matrix
 186:	88 e2       	ldi	r24, 0x28	; 40
 188:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x0C);  // Display ON, Cursor OFF
 18c:	8c e0       	ldi	r24, 0x0C	; 12
 18e:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x06);  // Entry mode
 192:	86 e0       	ldi	r24, 0x06	; 6
 194:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
	LCD_Command(0x01);  // Clear display
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
 19e:	8f e3       	ldi	r24, 0x3F	; 63
 1a0:	9f e1       	ldi	r25, 0x1F	; 31
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <_Z8LCD_Initv+0x34>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <_Z8LCD_Initv+0x3a>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <_Z10LCD_StringPKc>:
	_delay_ms(2);
}

void LCD_String(const char *str) {
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	ec 01       	movw	r28, r24
	while (*str) {
 1b2:	88 81       	ld	r24, Y
 1b4:	88 23       	and	r24, r24
 1b6:	21 f0       	breq	.+8      	; 0x1c0 <_Z10LCD_StringPKc+0x14>
		LCD_Char(*str++);
 1b8:	21 96       	adiw	r28, 0x01	; 1
 1ba:	0e 94 81 00 	call	0x102	; 0x102 <_Z8LCD_Charh>
	LCD_Command(0x01);  // Clear display
	_delay_ms(2);
}

void LCD_String(const char *str) {
	while (*str) {
 1be:	f9 cf       	rjmp	.-14     	; 0x1b2 <_Z10LCD_StringPKc+0x6>
		LCD_Char(*str++);
	}
}
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	08 95       	ret

000001c6 <_Z9LCD_Clearv>:

// Clear LCD screen
void LCD_Clear() {
	LCD_Command(0x01);
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	0e 94 4b 00 	call	0x96	; 0x96 <_Z11LCD_Commandh>
 1cc:	8f e3       	ldi	r24, 0x3F	; 63
 1ce:	9f e1       	ldi	r25, 0x1F	; 31
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <_Z9LCD_Clearv+0xa>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <_Z9LCD_Clearv+0x10>
 1d6:	00 00       	nop
 1d8:	08 95       	ret

000001da <main>:
void LCD_String(char *str);
void LCD_Clear();

int main(void) {
	// Configure LCD pins as output
	DDRD |= (1 << RS) | (1 << RW) | (1 << EN) | (1 << D4) | (1 << D5) | (1 << D6) | (1 << D7);
 1da:	8a b1       	in	r24, 0x0a	; 10
 1dc:	8f 67       	ori	r24, 0x7F	; 127
 1de:	8a b9       	out	0x0a, r24	; 10
	
	LCD_Init();  // Initialize LCD
 1e0:	0e 94 b7 00 	call	0x16e	; 0x16e <_Z8LCD_Initv>

	LCD_String("DEIE");  // Display "DEIE"
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	91 e0       	ldi	r25, 0x01	; 1
 1e8:	0e 94 d6 00 	call	0x1ac	; 0x1ac <_Z10LCD_StringPKc>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	83 ed       	ldi	r24, 0xD3	; 211
 1f0:	90 e3       	ldi	r25, 0x30	; 48
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <main+0x18>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <main+0x22>
 1fc:	00 00       	nop
	_delay_ms(1000);  // Wait for 1 second

	LCD_Clear();  // Clear the LCD
 1fe:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_Z9LCD_Clearv>
 202:	ff cf       	rjmp	.-2      	; 0x202 <main+0x28>

00000204 <_exit>:
 204:	f8 94       	cli

00000206 <__stop_program>:
 206:	ff cf       	rjmp	.-2      	; 0x206 <__stop_program>
